
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 13:56:43' prior: 50899848!
createCartForClient: aUser withPassword: aPassword atTime: aTime
|authenticationResult iDOfCart|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.
authenticationResult ifTrue: [ 
	iDOfCart:=nextIdavailable .
	cartsByID at: iDOfCart put: (Cart acceptingItemsOf: catalogue) .
	timeOfLastUseCartsByID at: iDOfCart put: aTime.
	userOfCartById at: iDOfCart put: aUser.
	self increaseNextIdavailable .
	
	

	
	
	^iDOfCart.
	].! !
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 13:58:41' prior: 50899869!
createCartForClient: aUser withPassword: aPassword atTime: aTime
|authenticationResult iDOfCart|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.
authenticationResult ifTrue: [ 
	iDOfCart:=nextIdavailable .
	cartsByID at: iDOfCart put: (Cart acceptingItemsOf: catalogue) .
	timeOfLastUseCartsByID at: iDOfCart put: aTime.
	userOfCartById at: iDOfCart put: aUser.
	self increaseNextIdavailable .
	
	totalCostOfUserPurchases at: aUser  put: 0.
	(userPurchases at: aUser put: Bag new).

	
	
	^iDOfCart.
	].! !
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:00:01' prior: 50899887!
createCartForClient: aUser withPassword: aPassword atTime: aTime
|authenticationResult iDOfCart|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.
authenticationResult ifTrue: [ 
	iDOfCart:=nextIdavailable .
	cartsByID at: iDOfCart put: (Cart acceptingItemsOf: catalogue) .
	timeOfLastUseCartsByID at: iDOfCart put: aTime.
	userOfCartById at: iDOfCart put: aUser.
	self increaseNextIdavailable .
	
	
	totalCostOfUserPurchases at: aUser  put: 0.
	(userPurchases at: aUser put: Bag new).

	
	
	^iDOfCart.
	].! !
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:00:37' prior: 50899907!
createCartForClient: aUser withPassword: aPassword atTime: aTime
|authenticationResult iDOfCart|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.
authenticationResult ifTrue: [ 
	iDOfCart:=nextIdavailable .
	cartsByID at: iDOfCart put: (Cart acceptingItemsOf: catalogue) .
	timeOfLastUseCartsByID at: iDOfCart put: aTime.
	userOfCartById at: iDOfCart put: aUser.
	self increaseNextIdavailable .
	
	(totalCostOfUserPurchases includesKey: aUser) ifFalse: [
		totalCostOfUserPurchases at: aUser  put: 0.
		(userPurchases at: aUser put: Bag new).
	]

	
	
	^iDOfCart.
	].! !

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:00:48'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:00:48'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:00:48'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:01:46' prior: 50899927!
createCartForClient: aUser withPassword: aPassword atTime: aTime
|authenticationResult iDOfCart|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.
authenticationResult ifTrue: [ 
	iDOfCart:=nextIdavailable .
	cartsByID at: iDOfCart put: (Cart acceptingItemsOf: catalogue) .
	timeOfLastUseCartsByID at: iDOfCart put: aTime.
	userOfCartById at: iDOfCart put: aUser.
	self increaseNextIdavailable .
	
	(totalCostOfUserPurchases includesKey: aUser) ifFalse: [
		totalCostOfUserPurchases at: aUser  put: 0.
		(userPurchases at: aUser put: Bag new).
	].

	
	
	^iDOfCart.
	].! !

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:01:59'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:01:59'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:01:59'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:03:31'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:03:31'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:03:31'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:04:02' prior: 50899732!
checkOutCart: aCartId debitingFrom: aCreditCard withProcessor: aMerchantProcessor atTime: aTime
|cashier saleValue userOfCart|

(cartsByID includesKey: aCartId) ifTrue: [
	
	(((timeOfLastUseCartsByID at: aCartId) +30 minutes ) < aTime) ifTrue: [self error: self class cartExpiredErrorDescription].
	
	timeOfLastUseCartsByID at: aCartId put: aTime.
	
	cashier:= Cashier
		toCheckout: (cartsByID at: aCartId )
		charging:  aCreditCard
		throught: aMerchantProcessor
		on:  (aTime)
		registeringOn: (salesBook ).
		
		saleValue:= cashier checkOut.
		userOfCart:= userOfCartById at: aCartId .
		
		totalCostOfUserPurchases at: userOfCart  put: (totalCostOfUserPurchases at: userOfCart)+saleValue.
		(userPurchases at: userOfCart) addAll: ((cartsByID at: aCartId ) contents ).
		
	cartsByID removeKey: aCartId .
		timeOfLastUseCartsByID removeKey: aCartId.
	] 
	ifFalse:[
		self error: self class invalidCartErrorDescription .
	]
! !

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:04:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:04:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:04:08'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:06:18' prior: 50899813!
initializeWithAuthenticator: aAuthenticator withACatalogue: aCatalogue
authenticator :=aAuthenticator.
catalogue :=aCatalogue .
nextIdavailable := 1.
salesBook := OrderedCollection new.

cartsByID := Dictionary new.
timeOfLastUseCartsByID := Dictionary new.
userOfCartById := Dictionary new.

userPurchases := Dictionary new.
totalCostOfUserPurchases := Dictionary new.
! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02creatingACartRisesAnErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03cannotListACartIfThereIsNotACartWIthTheAskedId stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04cannotAddToCartIfThereIsNotACartWithTheAskedId stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ValidItemsAreAddedToCart stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:06:37'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07PurchasesListFromAClientWithNoPurchasesIsEmpty stamp: 'AS 12/3/2020 14:06:37'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08ListingPurchasesRaiseAndErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:06:37'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10CheckingOutACartRemovesItFromTheListOfValidCarts stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11ListingACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12addingToACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13tryingToCheckoutIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:06:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:06:44'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:06:45'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:06:45'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:09:20' prior: 50899472!
listPurchasesOfUser: aUser withPassword: aPassword

|authenticationResult|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.

authenticationResult ifTrue: [ 
	(userPurchases includesKey: aUser) ifTrue: [(userPurchases at: aUser)->(totalCostOfUserPurchases at: aUser) ]
	ifFalse: [^((Bag new)->0). ]

	].
! !

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:09:23'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:09:23'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:09:23'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'AS 12/3/2020 14:10:37' prior: 50899336!
test09CheckingOutACartAddsPurchasesToItsUser

|interface user password cartID cartExpectedContents expectedPrice returnValue|

	interface := InternalRestInterface forStore: testObjectsFactory defaultStore.
		
	user:= testObjectsFactory validUser.
	password :=testObjectsFactory validPassword .
							
	cartID :=interface createCartForClient:user withPassword: password.
	
	interface addToCart: cartID theProduct: (testObjectsFactory itemSellByTheStore ) withAmount: 2.						
	
	interface checkOutCart:  cartID debitingFrom: testObjectsFactory notExpiredCreditCard withProcessor: self.
	
	
	cartExpectedContents:=Bag new .
	cartExpectedContents add: (testObjectsFactory itemSellByTheStore) withOccurrences: 2.
	expectedPrice := testObjectsFactory itemSellByTheStorePrice * 2.
	
	returnValue:=(interface listPurchasesOfUser: user withPassword: password).
	
	self assert: ((interface listPurchasesOfUser: user withPassword: password) = ((cartExpectedContents )->expectedPrice )).
! !

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:10:45'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:10:45'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:10:45'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'AS 12/3/2020 14:11:51' prior: 50900132!
listPurchasesOfUser: aUser withPassword: aPassword

|authenticationResult|
authenticationResult := authenticator authenticateUser: aUser withPassword: aPassword.

authenticationResult ifTrue: [ 
	(userPurchases includesKey: aUser) ifTrue: [^(userPurchases at: aUser)->(totalCostOfUserPurchases at: aUser) ]
	ifFalse: [^((Bag new)->0). ]

	].
! !

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:11:55'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'AS 12/3/2020 14:12:05' prior: 50900158!
test09CheckingOutACartAddsPurchasesToItsUser

|interface user password cartID cartExpectedContents expectedPrice|

	interface := InternalRestInterface forStore: testObjectsFactory defaultStore.
		
	user:= testObjectsFactory validUser.
	password :=testObjectsFactory validPassword .
							
	cartID :=interface createCartForClient:user withPassword: password.
	
	interface addToCart: cartID theProduct: (testObjectsFactory itemSellByTheStore ) withAmount: 2.						
	
	interface checkOutCart:  cartID debitingFrom: testObjectsFactory notExpiredCreditCard withProcessor: self.
	
	
	cartExpectedContents:=Bag new .
	cartExpectedContents add: (testObjectsFactory itemSellByTheStore) withOccurrences: 2.
	expectedPrice := testObjectsFactory itemSellByTheStorePrice * 2.
	
	
	self assert: ((interface listPurchasesOfUser: user withPassword: password) = ((cartExpectedContents )->expectedPrice )).
! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02creatingACartRisesAnErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03cannotListACartIfThereIsNotACartWIthTheAskedId stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04cannotAddToCartIfThereIsNotACartWithTheAskedId stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ValidItemsAreAddedToCart stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:12:09'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07PurchasesListFromAClientWithNoPurchasesIsEmpty stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08ListingPurchasesRaiseAndErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CheckingOutACartRemovesItFromTheListOfValidCarts stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11ListingACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12addingToACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13tryingToCheckoutIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:12:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:12:09'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:12:09'!
ERROR!

----SNAPSHOT----(3 December 2020 14:12:17) tusLibros-iteracion3.image priorSource: 18182861!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'AS 12/3/2020 14:12:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02creatingACartRisesAnErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:12:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03cannotListACartIfThereIsNotACartWIthTheAskedId stamp: 'AS 12/3/2020 14:12:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04cannotAddToCartIfThereIsNotACartWithTheAskedId stamp: 'AS 12/3/2020 14:12:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ValidItemsAreAddedToCart stamp: 'AS 12/3/2020 14:12:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:12:28'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:12:28'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:12:28'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07PurchasesListFromAClientWithNoPurchasesIsEmpty stamp: 'AS 12/3/2020 14:12:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08ListingPurchasesRaiseAndErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:12:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:12:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CheckingOutACartRemovesItFromTheListOfValidCarts stamp: 'AS 12/3/2020 14:12:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11ListingACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:12:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12addingToACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:12:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13tryingToCheckoutIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:12:42'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'AS 12/3/2020 14:14:22' prior: 50899182!
test06CannotCheckoutCartWithInvalidID
|interface  |

	interface := InternalRestInterface forStore: testObjectsFactory defaultStore.
	
	self
		should: [interface checkOutCart: 1 debitingFrom: (testObjectsFactory notExpiredCreditCard ) withProcessor: self .]
		raise: Error withMessageText: Store invalidCartErrorDescription.

	
! !

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02creatingACartRisesAnErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03cannotListACartIfThereIsNotACartWIthTheAskedId stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04cannotAddToCartIfThereIsNotACartWithTheAskedId stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ValidItemsAreAddedToCart stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07PurchasesListFromAClientWithNoPurchasesIsEmpty stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08ListingPurchasesRaiseAndErrorIfAuthenticatorDoesNotValidateCredentials stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckingOutACartAddsPurchasesToItsUser stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CheckingOutACartRemovesItFromTheListOfValidCarts stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11ListingACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12addingToACartIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13tryingToCheckoutIf30MinutesHappenedSinceTheCartWasLastUsedShouldRaiseAnError stamp: 'AS 12/3/2020 14:14:25'!
PASSED!

----SNAPSHOT----(3 December 2020 14:15:14) tusLibros-iteracion3.image priorSource: 18197273!

----SNAPSHOT----(3 December 2020 14:16:51) tusLibros-iteracion3.image priorSource: 18201712!